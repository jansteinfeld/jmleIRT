[{"path":"jansteinfeld.github.io/jmleIRT/articles/jmleIRT-intro.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"First steps with the Package jmleIRT","text":"jmleIRT package provides implementation Joint Maximum Likelihood Estimation (JMLE) Rasch (1PL) model. allows estimation item difficulties person abilities dichotomous response data bias correction weighted likelihood estimation options.","code":""},{"path":"jansteinfeld.github.io/jmleIRT/articles/jmleIRT-intro.html","id":"rasch-model-specification","dir":"Articles","previous_headings":"","what":"Rasch Model Specification","title":"First steps with the Package jmleIRT","text":"person p=1,…,Pp = 1, \\ldots, P item =1,…,Ii = 1, \\ldots, , Rasch model posits probability correct response XpiX_{pi} : P(Xpi=1∣θp,βi)=exp⁡(θp−βi)1+exp⁡(θp−βi) P(X_{pi} = 1 \\mid \\theta_p, \\beta_i) = \\frac{\\exp(\\theta_p - \\beta_i)}{1 + \\exp(\\theta_p - \\beta_i)} θp\\theta_p represents ability person pp βi\\beta_i difficulty item ii.","code":""},{"path":"jansteinfeld.github.io/jmleIRT/articles/jmleIRT-intro.html","id":"joint-maximum-likelihood-estimation","dir":"Articles","previous_headings":"","what":"Joint Maximum Likelihood Estimation","title":"First steps with the Package jmleIRT","text":"joint likelihood across persons items L(θ,β)=∏p=1P∏=1IP(Xpi∣θp,βi) L(\\theta, \\beta) = \\prod_{p=1}^P \\prod_{=1}^P(X_{pi} \\mid \\theta_p, \\beta_i) JMLE alternates updates θp\\theta_p βi\\beta_i convergence, providing simultaneous estimates person item parameters.","code":""},{"path":"jansteinfeld.github.io/jmleIRT/articles/jmleIRT-intro.html","id":"bias-correction","dir":"Articles","previous_headings":"","what":"Bias Correction","title":"First steps with the Package jmleIRT","text":"Finite samples extreme scores induce bias JMLE estimates. package implements: Epsilon bias stabilization: Adding small ε>0\\varepsilon > 0 avoid infinite logits improve numerical stability. Analytical bias correction: Drawing methods psychometric literature reduce bias item difficulty estimates.","code":""},{"path":"jansteinfeld.github.io/jmleIRT/articles/jmleIRT-intro.html","id":"using-the-jmleirt-package","dir":"Articles","previous_headings":"","what":"Using the jmleIRT Package","title":"First steps with the Package jmleIRT","text":"Key features: - Missing values design allowed (NA). - Optional epsilon adjustment (eps) reduce estimation bias extreme scores. - Centering based either “items” “persons” ensure identifiability. - Post-hoc bias correction (bias_correction = TRUE/FALSE). - Optional computation Warm’s weighted likelihood estimates (WLE) person parameters (estimatewle = TRUE). - Fast Newton-Raphson optimization C++.","code":""},{"path":"jansteinfeld.github.io/jmleIRT/articles/jmleIRT-intro.html","id":"simulating-data","dir":"Articles","previous_headings":"Using the jmleIRT Package","what":"Simulating Data","title":"First steps with the Package jmleIRT","text":"first simulate dataset person responses.","code":"N <- 100  # persons I <- 10   # items X <- matrix(rbinom(N * I, 1, 0.5), nrow = N) # randomly set 10% of entries to missing X[sample(length(X), size = 0.1 * length(X))] <- NA head(X) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #> [1,]    0    1    0    1    0    0    0    0    1     1 #> [2,]    1    1    1    0    1    0    1    1    0     0 #> [3,]    1    0    0    1    1    0    0    0    0     1 #> [4,]    0    0    0    1    0    1    1    1    1     1 #> [5,]   NA    0   NA    0    0    0   NA    1    0     0 #> [6,]    0    1    1    0    0    1    1    0    0     0"},{"path":"jansteinfeld.github.io/jmleIRT/articles/jmleIRT-intro.html","id":"basic-jml-estimation","dir":"Articles","previous_headings":"Using the jmleIRT Package","what":"Basic JML Estimation","title":"First steps with the Package jmleIRT","text":"Run JML estimation centering “items” (default): output list : theta: person ability estimates beta: item difficulty estimates iterations: number NR iterations converged: convergence flag bias_correction: whether applied center: ‘items’ ‘persons’ wle_estimate: person WLEs (requested)","code":"fit <- jmle_estimation(   X, max_iter = 500, conv = 1e-5,   center = \"items\", bias_correction = FALSE,   estimatewle = FALSE, verbose = FALSE )  str(fit) #> List of 7 #>  $ theta          : num [1:100] -0.466 0.364 -0.466 0.364 -1.86 ... #>  $ beta           : num [1:10] 0.472 -0.494 -0.216 -0.269 0.124 ... #>  $ iterations     : int 500 #>  $ converged      : logi FALSE #>  $ bias_correction: logi FALSE #>  $ center         : chr \"items\" #>  $ wle_estimate   : num [1:100] NA NA NA NA NA NA NA NA NA NA ... #>  - attr(*, \"class\")= chr [1:2] \"jmleIRT\" \"list\""},{"path":"jansteinfeld.github.io/jmleIRT/articles/jmleIRT-intro.html","id":"bias-correction-1","dir":"Articles","previous_headings":"Using the jmleIRT Package","what":"Bias Correction","title":"First steps with the Package jmleIRT","text":"Bias correction rescales item difficulty estimates. Compare uncorrected version:","code":"fit_bc <- jmle_estimation(X, center = \"items\", bias_correction = TRUE) summary(fit_bc$beta) #>      Min.   1st Qu.    Median      Mean   3rd Qu.      Max.  #> -0.444924 -0.230269  0.009095  0.000000  0.234489  0.424776 summary(fit$beta) #>     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.  #> -0.49436 -0.25585  0.01011  0.00000  0.26054  0.47197"},{"path":"jansteinfeld.github.io/jmleIRT/articles/jmleIRT-intro.html","id":"warms-wle-estimates","dir":"Articles","previous_headings":"Using the jmleIRT Package","what":"Warm’s WLE Estimates","title":"First steps with the Package jmleIRT","text":"Warm’s weighted likelihood estimates can obtained addition JML estimates.","code":"fit_wle <- jmle_estimation(X, center = \"items\", estimatewle = TRUE) head(fit_wle$wle_estimate) #> [1] -0.3779268  0.3781344 -0.3779268  0.3781344 -1.4876481 -0.3779268"},{"path":"jansteinfeld.github.io/jmleIRT/articles/jmleIRT-intro.html","id":"handling-missing-data","dir":"Articles","previous_headings":"Using the jmleIRT Package","what":"Handling Missing Data","title":"First steps with the Package jmleIRT","text":"function handles missing responses (NA) without failure:","code":"X_miss <- X X_miss[1:5, 1:2] <- NA fit_miss <- jmle_estimation(X_miss, center = \"items\")  length(fit_miss$theta) #> [1] 100 length(fit_miss$beta) #> [1] 10"},{"path":"jansteinfeld.github.io/jmleIRT/articles/jmleIRT-intro.html","id":"conclusion","dir":"Articles","previous_headings":"Using the jmleIRT Package","what":"Conclusion","title":"First steps with the Package jmleIRT","text":"jmleIRT package provides simple efficient workflow Rasch JML estimation useful options centering, bias correction, WLEs, robust missing data.","code":""},{"path":"jansteinfeld.github.io/jmleIRT/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jan Steinfeld. Maintainer, author. Alexander Robitzsch. Author.","code":""},{"path":"jansteinfeld.github.io/jmleIRT/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Steinfeld J, Robitzsch (2025). jmleIRT: Joint Maximum Likelihood Estimation Rasch Model. R package version 0.0.2-11, https://github.com/jansteinfeld/jmleIRT, https://jansteinfeld.github.io/jmleIRT/.","code":"@Manual{,   title = {jmleIRT: Joint Maximum Likelihood Estimation of the Rasch Model},   author = {Jan Steinfeld and Alexander Robitzsch},   year = {2025},   note = {R package version 0.0.2-11,         https://github.com/jansteinfeld/jmleIRT},   url = {https://jansteinfeld.github.io/jmleIRT/}, }"},{"path":[]},{"path":"jansteinfeld.github.io/jmleIRT/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Joint Maximum Likelihood Estimation of the Rasch Model","text":"jmleIRT package provides tools estimate Rasch (1PL) model parameters using Joint Maximum Likelihood Estimation (JMLE) R. package supports bias correction Warm’s Weighted Likelihood Estimates suitable psychometric research.","code":""},{"path":"jansteinfeld.github.io/jmleIRT/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Joint Maximum Likelihood Estimation of the Rasch Model","text":"Joint Maximum Likelihood Estimation person abilities θp\\theta_p item difficulties βi\\beta_i. Bias correction reduce estimation bias, including epsilon bias stabilization. Warm’s Weighted Likelihood Estimates (WLE) person abilities. Support missing data (missing responses coded NA). Verbose mode trace iteration progress. Comprehensive unit tests reliability.","code":""},{"path":"jansteinfeld.github.io/jmleIRT/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Joint Maximum Likelihood Estimation of the Rasch Model","text":"Install CRAN: GitHub development version:","code":"install.packages(\"jmleIRT\") # install.packages(\"remotes\") remotes::install_github(\"jansteinfeld/jmleIRT\")"},{"path":"jansteinfeld.github.io/jmleIRT/index.html","id":"usage-example","dir":"","previous_headings":"","what":"Usage Example","title":"Joint Maximum Likelihood Estimation of the Rasch Model","text":"","code":"library(jmleIRT)  # Simulate response  40 persons (p) × 5 items (i) set.seed(123) X <- matrix(rbinom(40 * 5, 1, 0.5), nrow = 40)  # Estimate Rasch model using JMLE with bias correction fit <- jmle_estimation(X, max_iter = 200, conv = 1e-5,                       center = \"items\", bias_correction = TRUE)  # Item difficulties (centered) print(fit$beta)  # Compute Weighted Likelihood Estimates for persons wle_res <- estimate_wle(X, fit$beta)  # Person ability estimates via WLE print(wle_res$wle)"},{"path":[]},{"path":"jansteinfeld.github.io/jmleIRT/index.html","id":"the-rasch-model","dir":"","previous_headings":"","what":"The Rasch Model","title":"Joint Maximum Likelihood Estimation of the Rasch Model","text":"Rasch model fundamental Item Response Theory (IRT) model used dichotomous item data. probability person pp ability θp\\theta_p answers item ii difficulty βi\\beta_i correctly modeled : P(Xpi=1∣θp,βi)=eθp−βi1+eθp−βiP(X_{pi} = 1 \\mid \\theta_p, \\beta_i) = \\frac{e^{\\theta_p - \\beta_i}}{1 + e^{\\theta_p - \\beta_i}} Xpi∈{0,1}X_{pi} \\\\{0,1\\} indicates correctness response.","code":""},{"path":"jansteinfeld.github.io/jmleIRT/index.html","id":"joint-maximum-likelihood-estimation-jmle","dir":"","previous_headings":"","what":"Joint Maximum Likelihood Estimation (JMLE)","title":"Joint Maximum Likelihood Estimation of the Rasch Model","text":"JMLE simultaneously estimates person abilities θ=(θ1,…,θP)\\theta = (\\theta_1, \\ldots, \\theta_P) item difficulties β=(β1,…,βI)\\beta = (\\beta_1, \\ldots, \\beta_I) maximizing joint likelihood observed responses: L(θ,β)=∏p=1P∏=1IP(Xpi∣θp,βi)L(\\theta, \\beta) = \\prod_{p=1}^P \\prod_{=1}^P(X_{pi} \\mid \\theta_p, \\beta_i) typically solved via iterative algorithm alternating updates θp\\theta_p βi\\beta_i, convergence criteria met. Although easy implement computationally efficient, JMLE estimates suffer bias, especially small samples extreme response patterns.","code":""},{"path":"jansteinfeld.github.io/jmleIRT/index.html","id":"bias-correction-methods","dir":"","previous_headings":"","what":"Bias Correction Methods","title":"Joint Maximum Likelihood Estimation of the Rasch Model","text":"mitigate estimation bias, several techniques implemented: Epsilon bias correction: Adding small stabilization constant ε>0\\varepsilon > 0 avoid infinite logits stabilize extreme scores, promoting convergence finite parameter estimates. Analytical bias correction: Based theoretical adjustments parameter estimates described recent psychometric literature [Bertoli et al., 2012; Lando & Bertoli-Barsotti, 2014]. methods enhance accuracy robustness JMLE algorithm.","code":""},{"path":"jansteinfeld.github.io/jmleIRT/index.html","id":"package-features","dir":"","previous_headings":"","what":"Package Features","title":"Joint Maximum Likelihood Estimation of the Rasch Model","text":"Estimation person item parameters using bias-corrected JMLE Warm’s Weighted Likelihood Estimates (WLE) refined ability estimation Handling missing data Extensive test coverage ensuring reliability Comprehensive documentation examples ease use Open-source development GitHub transparency collaboration Optimized C++ backend performance User-friendly R interface collaboration psychometricians statisticians continuous improvement","code":""},{"path":"jansteinfeld.github.io/jmleIRT/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Joint Maximum Likelihood Estimation of the Rasch Model","text":"Bertoli Barsotti, L., & Punzo, . (2012). Comparison two bias reduction techniques Rasch model. Electronic Journal Applied Statistical Analysis, 5(3), 360-366. Lando, T., & Bertoli Barsotti, L. (2014). modified minimum divergence estimator: preliminary results Rasch model. Electronic Journal Applied Statistical Analysis, 7(1), 37-57. Wright, B. D., & Panchapakesan, N. (1969). Procedure Sample-Free Item Analysis. Educational Psychological Measurement, 29(1), 23-48.","code":""},{"path":"jansteinfeld.github.io/jmleIRT/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Joint Maximum Likelihood Estimation of the Rasch Model","text":"GPL-3 Contributions welcome via GitHub: [jansteinfeld/jmleIRT].","code":""},{"path":"jansteinfeld.github.io/jmleIRT/reference/estimate_rasch_model.html","id":null,"dir":"Reference","previous_headings":"","what":"High-level Rasch model estimation — estimate_rasch_model","title":"High-level Rasch model estimation — estimate_rasch_model","text":"User-friendly front-end currently dispatches JML; kept backward-compatibility future method expansion.","code":""},{"path":"jansteinfeld.github.io/jmleIRT/reference/estimate_rasch_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"High-level Rasch model estimation — estimate_rasch_model","text":"","code":"estimate_rasch_model(X, method = \"jml\", ...)"},{"path":"jansteinfeld.github.io/jmleIRT/reference/estimate_rasch_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"High-level Rasch model estimation — estimate_rasch_model","text":"X Numeric response matrix (0/1, NA allowed). method Character, currently \"jml\" supported . ... Passed jmle_estimation().","code":""},{"path":"jansteinfeld.github.io/jmleIRT/reference/estimate_rasch_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"High-level Rasch model estimation — estimate_rasch_model","text":"List jmle_estimation().","code":""},{"path":"jansteinfeld.github.io/jmleIRT/reference/jmleIRT-package.html","id":null,"dir":"Reference","previous_headings":"","what":"jmleIRT: Joint Maximum Likelihood Estimation of the Rasch Model — jmleIRT-package","title":"jmleIRT: Joint Maximum Likelihood Estimation of the Rasch Model — jmleIRT-package","text":"Implements joint maximum likelihood estimation (JMLE) item parameters Rasch model (1PL). Provides methods bias correction item parameter estimates weighted likelihood estimation (WLE) person parameters.","code":""},{"path":[]},{"path":"jansteinfeld.github.io/jmleIRT/reference/jmleIRT-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"jmleIRT: Joint Maximum Likelihood Estimation of the Rasch Model — jmleIRT-package","text":"Maintainer: Jan Steinfeld jan.d.steinfeld@gmail.com (ORCID) Authors: Alexander Robitzsch robitzsch@leibniz-ipn.de (ORCID)","code":""},{"path":"jansteinfeld.github.io/jmleIRT/reference/jmle_estimation.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit Rasch model by JML with optional WLE — jmle_estimation","title":"Fit Rasch model by JML with optional WLE — jmle_estimation","text":"Fits Rasch (1PL) model using joint maximum likelihood via efficient C++ Newton-Raphson implementation. Missing responses (NA) allowed. Optional epsilon adjustment helps avoid biased estimates due extreme-score degeneracy, centering ensures identifiability. Optionally returns Warm's WLE person estimates computed estimated item difficulties.","code":""},{"path":"jansteinfeld.github.io/jmleIRT/reference/jmle_estimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit Rasch model by JML with optional WLE — jmle_estimation","text":"","code":"jmle_estimation(   X,   max_iter = 1000,   conv = 1e-06,   eps = 0,   bias_correction = FALSE,   center = \"items\",   max_update = 1.5,   verbose = FALSE,   estimatewle = FALSE,   wle_adj = 1e-08 )"},{"path":"jansteinfeld.github.io/jmleIRT/reference/jmle_estimation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit Rasch model by JML with optional WLE — jmle_estimation","text":"X Numeric matrix responses (0/1) possible NA missing. max_iter Maximum NR iterations C++ (default 1000). conv Convergence threshold maximum absolute parameter change. eps Epsilon adjustment extreme person scores (default 0). bias_correction Logical, simple post-hoc scaling item betas. center either \"items\" \"persons\"; enforce mean(beta)=0 mean(theta)=0. max_update Step-size clip per update stabilize NR (default 1.5). verbose Logical, periodic progress C++ (every 10 iters). estimatewle Logical, compute Warm's WLE per person using estimated beta. wle_adj Small adjustment avoid extreme raw scores WLE (default 1e-8).","code":""},{"path":"jansteinfeld.github.io/jmleIRT/reference/jmle_estimation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit Rasch model by JML with optional WLE — jmle_estimation","text":"list components:   - theta: numeric vector person parameters   - beta: numeric vector item difficulties (mean 0 center = TRUE)   - iterations: integer iterations used   - converged: logical convergence indicator   - bias_correction, centered: echoes inputs   - wle_estimate: numeric vector WLE (estimatewle = TRUE) NA","code":""},{"path":"jansteinfeld.github.io/jmleIRT/reference/summary.jmleIRT.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of JML estimation — summary.jmleIRT","title":"Summary of JML estimation — summary.jmleIRT","text":"Print brief summary JML fit, showing means person item parameters. Expects object numeric components `theta` `beta`; designed objects class \"jmleIRT\".","code":""},{"path":"jansteinfeld.github.io/jmleIRT/reference/summary.jmleIRT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of JML estimation — summary.jmleIRT","text":"","code":"# S3 method for class 'jmleIRT' summary(object, digits = 4, ...)"},{"path":"jansteinfeld.github.io/jmleIRT/reference/summary.jmleIRT.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of JML estimation — summary.jmleIRT","text":"object object class \"jmleIRT\" containing numeric vectors `theta` `beta`. strict fit object, must still provide `theta` `beta` accessible `object$theta` `object$beta`. digits Number digits display (default 4). ... arguments passed used methods (currently unused).","code":""},{"path":"jansteinfeld.github.io/jmleIRT/reference/summary.jmleIRT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of JML estimation — summary.jmleIRT","text":"input object, returned invisibly. # Minimal example adapter object X <- matrix(c(  1, 0, 1, NA,  0, 1, 1, 1,  1, 1, 0, 0,  NA, NA, 0, 1,  0, 0, 0, NA ), nrow=5, byrow=TRUE) res <- jmle_estimation(X, max_iter=200, estimatewle=TRUE, verbose=FALSE) summary(res)","code":""},{"path":[]},{"path":"jansteinfeld.github.io/jmleIRT/reference/wle_estimation.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Warm's WLE for given item difficulties — wle_estimation","title":"Compute Warm's WLE for given item difficulties — wle_estimation","text":"Convenience wrapper compute person WLE given response matrix item difficulties, using C++ implementation. NA X allowed.","code":""},{"path":"jansteinfeld.github.io/jmleIRT/reference/wle_estimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Warm's WLE for given item difficulties — wle_estimation","text":"","code":"wle_estimation(   X,   beta,   max_iter = 100,   tol = 1e-10,   lower_ext = NA_real_,   upper_ext = NA_real_ )"},{"path":"jansteinfeld.github.io/jmleIRT/reference/wle_estimation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Warm's WLE for given item difficulties — wle_estimation","text":"X Numeric response matrix (0/1) possible NA. beta Numeric vector item difficulties, length ncol(X). max_iter Max iterations person-level NR (default 100). tol Convergence tolerance NR step size (default 1e-10). lower_ext, upper_ext Optional finite bounds extreme raw scores.","code":""},{"path":"jansteinfeld.github.io/jmleIRT/reference/wle_estimation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Warm's WLE for given item difficulties — wle_estimation","text":"List raw_score, wle, standard_error, conv, iterations.","code":""}]
