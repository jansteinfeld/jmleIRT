// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// estimate_wle
Rcpp::List estimate_wle(SEXP X_, Rcpp::NumericVector beta, int max_iter, double tol, double lower_ext, double upper_ext, double wle_adj);
RcppExport SEXP _jmleIRT_estimate_wle(SEXP X_SEXP, SEXP betaSEXP, SEXP max_iterSEXP, SEXP tolSEXP, SEXP lower_extSEXP, SEXP upper_extSEXP, SEXP wle_adjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type lower_ext(lower_extSEXP);
    Rcpp::traits::input_parameter< double >::type upper_ext(upper_extSEXP);
    Rcpp::traits::input_parameter< double >::type wle_adj(wle_adjSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_wle(X_, beta, max_iter, tol, lower_ext, upper_ext, wle_adj));
    return rcpp_result_gen;
END_RCPP
}
// estimate_jmle
Rcpp::List estimate_jmle(SEXP X_, int max_iter, double conv, double eps, bool bias_correction, std::string center, double max_update, bool verbose, bool estimatewle, double wle_adj);
RcppExport SEXP _jmleIRT_estimate_jmle(SEXP X_SEXP, SEXP max_iterSEXP, SEXP convSEXP, SEXP epsSEXP, SEXP bias_correctionSEXP, SEXP centerSEXP, SEXP max_updateSEXP, SEXP verboseSEXP, SEXP estimatewleSEXP, SEXP wle_adjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X_(X_SEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type conv(convSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type bias_correction(bias_correctionSEXP);
    Rcpp::traits::input_parameter< std::string >::type center(centerSEXP);
    Rcpp::traits::input_parameter< double >::type max_update(max_updateSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type estimatewle(estimatewleSEXP);
    Rcpp::traits::input_parameter< double >::type wle_adj(wle_adjSEXP);
    rcpp_result_gen = Rcpp::wrap(estimate_jmle(X_, max_iter, conv, eps, bias_correction, center, max_update, verbose, estimatewle, wle_adj));
    return rcpp_result_gen;
END_RCPP
}
// prox_rasch
List prox_rasch(NumericMatrix dat, NumericMatrix dat_resp, NumericVector freq, double conv, int maxiter);
RcppExport SEXP _jmleIRT_prox_rasch(SEXP datSEXP, SEXP dat_respSEXP, SEXP freqSEXP, SEXP convSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dat(datSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dat_resp(dat_respSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type freq(freqSEXP);
    Rcpp::traits::input_parameter< double >::type conv(convSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(prox_rasch(dat, dat_resp, freq, conv, maxiter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_jmleIRT_estimate_wle", (DL_FUNC) &_jmleIRT_estimate_wle, 7},
    {"_jmleIRT_estimate_jmle", (DL_FUNC) &_jmleIRT_estimate_jmle, 10},
    {"_jmleIRT_prox_rasch", (DL_FUNC) &_jmleIRT_prox_rasch, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_jmleIRT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
